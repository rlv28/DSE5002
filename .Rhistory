View(fdims)
View(fdims)
fhgtmean <- mean(fdims$hgt)
fhgtsd   <- sd(fdims$hgt)
hist(fdims$hgt, probability = TRUE, ylim = c(0, 0.06))
x <- 40:120
y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)
lines(x = x, y = y, col = "blue")
fwgtmean <- mean(fdims$wgt)
fwgtsd   <- sd(fdims$wgt)
hist(fdims$wgt, probability = TRUE, ylim = c(0, 0.06))
x <- 30: 130
y <- dnorm(x = x, mean = fwgtmean, sd = fwgtsd)
lines(x = x, y = y, col = "blue")
fwgtmean <- mean(fdims$wgt)
fwgtsd   <- sd(fdims$wgt)
hist(fdims$wgt, probability = TRUE, ylim = c(0, 0.06))
x <- 20: 130
y <- dnorm(x = x, mean = fwgtmean, sd = fwgtsd)
lines(x = x, y = y, col = "blue")
fwgtmean <- mean(fdims$wgt)
fwgtsd   <- sd(fdims$wgt)
hist(fdims$wgt, probability = TRUE, ylim = c(0, 0.06))
x <- 20: 130
y <- dnorm(x = x, mean = fwgtmean, sd = fwgtsd)
lines(x = x, y = y, col = "blue")
qqnorm(fdims$wgt)
qqline(fdims$wgt)
sim_norm_wgt <- rnorm(n = length(fdims$wgt), mean = fwgtmean, sd = fwgtsd)
qqnorm(sim_norm_wgt)
qqline(sim_norm_wgt)
fwgtmean <- mean(fdims$wgt)
fwgtsd   <- sd(fdims$wgt)
hist(fdims$wgt, probability = TRUE, ylim = c(0, 0.06))
x <- 20: 130
y <- dnorm(x = x, mean = fwgtmean, sd = fwgtsd)
lines(x = x, y = y, col = "blue")
qqnorm(fdims$wgt)
qqline(fdims$wgt)
sim_norm_wgt <- rnorm(n = length(fdims$wgt), mean = fwgtmean, sd = fwgtsd)
qqnorm(sim_norm_wgt)
qqline(sim_norm_wgt)
qqnormsim(fdims$wgt)
qqnormsim(fdims$wgt)
1 - pnorm(q = 182, mean = fhgtmean, sd = fhgtsd)
1 - pnorm(182, fhgtmean, fhgtsd)
1 - pnorm(182, fhgtmean, fhgtsd)
sum(fdims$hgt > 182) / length(fdims$hgt)
pnorm(150, fhgtmean, fhgtsd)
sum(fdims$hgt < 150) / length(fdims$hgt)
pnorm(60, fwgtmean, fwgtsd)- pnorm(50, fwgtmean, fwgtsd)
sum(50 < fdims$wgt < 60) / length(fdims$wgt)
pnorm(60, fwgtmean, fwgtsd)- pnorm(50, fwgtmean, fwgtsd)
[sum(fdims$wgt < 60)- sum(fdims$wgt>50)] / length(fdims$wgt)
pnorm(60, fwgtmean, fwgtsd)- pnorm(50, fwgtmean, fwgtsd)
(sum(fdims$wgt < 60)- sum(fdims$wgt > 50)) / length(fdims$wgt)
pnorm(60, fwgtmean, fwgtsd)- pnorm(50, fwgtmean, fwgtsd)
(sum(fdims$wgt < 60)- sum(fdims$wgt < 50)) / length(fdims$wgt)
library(ggplot2)
download.file("http://www.openintro.org/stat/data/bdims.RData", destfile = "bdims.RData")
load("bdims.RData")
head(bdims)
mdims <- subset(bdims, sex == 1)
fdims <- subset(bdims, sex == 0)
ggplot(bdims, mapping = aes(x = hgt, fill = sex)
) + geom_histogram(colour = 'white', position = 'dodge')
ggplot(mdims, mapping = aes(x = hgt)
) + geom_histogram( colour = 'white')
ggplot(fdims, mapping = aes(x = hgt)
) + geom_histogram( colour = 'white')
fhgtmean <- mean(fdims$hgt)
fhgtsd   <- sd(fdims$hgt)
hist(fdims$hgt, probability = TRUE, ylim = c(0, 0.06))
x <- 140:190
y <- dnorm(x = x, mean = fhgtmean, sd = fhgtsd)
lines(x = x, y = y, col = "blue")
qqnorm(fdims$hgt)
qqline(fdims$hgt)
sim_norm <- rnorm(n = length(fdims$hgt), mean = fhgtmean, sd = fhgtsd)
qqnorm(sim_norm)
qqline(sim_norm)
qqnormsim(fdims$hgt)
qqnorm(fdims$bii.di)
qqline(fdims$bii.di)
qqnorm(fdims$elb.di)
qqline(fdims$elb.di)
qqnorm(fdims$age)
qqline(fdims$age)
qqnorm(fdims$che.de)
qqline(fdims$che.de)
qqnorm(fdims$kne.di)
qqline(fdims$kne.di)
ggplot(fdims, mapping = aes(x = kne.id)
) + geom_histogram( colour = 'white')
ggplot(fdims, mapping = aes(x = kne.di)
) + geom_histogram( colour = 'white')
ggplot(fdims, mapping = aes(x = kne.di)
+ ) + geom_histogram( colour = 'white')
ggplot(fdims, mapping = aes(x = kne.di)
) + geom_histogram( colour = 'white')
0.25 + 0.15 + 0.28
1- (0.25 + 0.15 + 0.28)
=$\frac{0.53*.37}{0.53*0.37 + 0.47*0.44}$
`r{0.53*.37}/{0.53*0.37 + 0.47*0.44}`
3/5
(0.53*.37)/(0.53*0.37 + 0.47*0.44)
a) the population adults in the US
`r322/765`
`r 322/765
`r 322/765`
`r 322/765`
pnorm(2.58, 0, 1)
pnorm(2.58, 0, 1)-pnorm(-2.58,0,1)
qnorm(.005,0,1)
qnorm(.05,0,1)
pnorm(-5)
pnorm(-8.9)
download.file("http://www.openintro.org/stat/data/mlb11.RData", destfile = "mlb11.RData")
load("mlb11.RData")
View(mlb11)
View(mlb11)
library(ggplot2)
ggplot(mlb11, mapping = aes(x = at_bats, y = runs)) + geom_plot()
library(ggplot2)
ggplot(mlb11, mapping = aes(x = at_bats, y = runs)) + geom_point()
library(ggplot2)
ggplot(mlb11, mapping = aes(x = at_bats, y = runs)) + geom_point()
cor(mlb11$runs, mlb11$at_bats)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
plot_ss(x = mlb11$at_bats, y = mlb11$runs, showSquares = TRUE)
m1 <- lm(runs ~ at_bats, data = mlb11)
View(m1)
View(m1)
m1 <- lm(runs ~ at_bats, data = mlb11)
view(m1)
m1 <- lm(runs ~ at_bats, data = mlb11)
View(m1)
m1 <- lm(runs ~ at_bats, data = mlb11)
summary(m1)
ggplot(mlb11, mapping = aes(x = homeruns, y = runs)) + geom_point()
cor(mlb11$runs, mlb11$homeruns)
m2 <- lm(runs ~ homeruns, data = mlb11)
summary(m2)
plot(mlb11$runs ~ mlb11$at_bats)
abline(m1)
-2789.2429+0.6305*5578
-2789.2429+0.6305*5579
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)
hist(m1$residuals)
plot(m1$residuals ~ mlb11$at_bats)
abline(h = 0, lty = 3)
hist(m1$residuals)
qqnorm(m1$residuals)
qqline(m1$residuals)
plot(mlb11$runs ~ mlb11$bat_avg)
m3 <- lm(runs ~ bat_avg, data = mlb11)
summary(m3)
abline(m3)
summary(lm(runs ~ at_bats, data = mlb11))
summary(lm(runs ~ hits, data = mlb11))
summary(lm(runs ~ homeruns, data = mlb11))
summary(lm(runs ~ bat_avg, data = mlb11))
summary(lm(runs ~ strikeouts, data = mlb11))
summary(lm(runs ~ stolen_bases, data = mlb11))
summary(lm(runs ~ wins, data = mlb11))
summary(lm(runs ~ new_onbase, data = mlb11))
summary(lm(runs ~ new_slug, data = mlb11))
summary(lm(runs ~ new_obs, data = mlb11))
plot(mlb11$runs ~ mlb11$new_obs)
m4 <- lm(runs ~ new_obs, data = mlb11)
summary(m4)
abline(m3)
plot(mlb11$runs ~ mlb11$new_obs)
m4 <- lm(runs ~ new_obs, data = mlb11)
summary(m4)
abline(m4)
plot(m1$residuals ~ mlb11$new_obs)
abline(h = 0, lty = 3)
plot(m1$residuals ~ mlb11$new_obs)
abline(h = 0, lty = 3)
hist(m4$residuals)
qqnorm(m4$residuals)
qqline(m4$residuals)
qnorm(.95,4313,583)
qnorm(.10,5261,871)
pnorm(-1.58)
pnorm(80, 72.6,4.78)
pnorm(80, 72.6,4.78)-pnorm(60, 72.6,4.78)
qnorm(.95, 72.6,4.78)
1-pnorm(70, 72.6,4.78)
pnorm(60, 72.6,4.78)
qnorm(.95,4313,583)
qnorm(.10,5261,807)
library(diplyr)
iris ->as_tibble(iris)
myf <- function(x) {
innerf <- function(x) assign('Global.res', x^2, envir = .GlobalEnv)
innerf(x+1)
}
myf(3)
myf(5)
y <- 10
f <- function(x) {
y <- 2
y^2 + g(x)
}
g <- function(x) {
x*y
}
f(5)
x <- 10
y <- 5
z <- 20
x < z & x > y
(x != z) & (y != z)
x + 2 * y = z
x + 2y = z
x + 2y == z
x + 2*y == z
test_vector <- c(1,5,11:22)
x %in% test_vector
test_vector <- c(1,5,11:22)
(x %in% test_vector) | (y %in% test_vector)
test_vector <- c(1,5,11:22)
(x %in% test_vector) | (y %in% test_vector) | (z %in% test_vector)
x == vector
test_vector[test_vector == 1]
test_vector[test_vector == 12]
test_vector[test_vector == x]
test_vector[test_vector == y]
test_vector[test_vector == 16]
[test_vector == 16]
test_vector[test_vector == z]
contain_x_y_z_vector <- c(x == test_vector)
test_vector[test_vector == z]
contain_x_y_z_vector <- c(y == test_vector)
test_vector[test_vector == z]
contain_x_y_z_vector <- c((x == test_vector) | (y == test_vector) | (z == test_vector))
#test_vector[test_vector == z]
contain_x_y_z_vector <- c((x == test_vector) | (y == test_vector) | (z == test_vector))
contain_x_y_z_vector[contain_x_y_z_vector == TRUE]
contain_x_y_z_vector <- c((x == test_vector) | (y == test_vector) | (z == test_vector))
#contain_x_y_z_vector[contain_x_y_z_vector == TRUE]
which(contain_x_y_z_vector == true)
contain_x_y_z_vector <- c((x == test_vector) | (y == test_vector) | (z == test_vector))
#contain_x_y_z_vector[contain_x_y_z_vector == TRUE]
which(contain_x_y_z_vector == TRUE)
fib  <- function(n)
{
if (length(n) > 1) return(sapply(n, fib))
if (n == 1) return(1)
if (n == 2) return(1)
return(fib(n-1)+fib(n-2))
}
catalan <- function(n) {
cat <- vector("numeric", length(max(n)) + 1)
for (i in 0:max(n)) {
if (i == 0) {
cat[i+1] <- 1
} else {
cat[i+1] <- ((4*i - 2)*cat[i])/(i + 1)
}
}
return(cat[n + 1])
}
fib_vec <- fib(1:10)
#slicing
fib_vec[1] #will slice the first element
fib_vec[1:10] #will slice the first 10 elements
fib_vec[c(1,5,10)]  #will slice the 1st, 5th, and 10th elements
#returning indices
which(fib_vec == 8) #return the indices where fib_vec equals 8
which.max(fib_vec) #return the indices wher the maximum value exists
which.min(fib_vec) #return the indices wher the minimum value exists
#removing elements
fib_vec[-8] #remove the 8th element
fib_vec[-1:-10] #remove the first through 10th element
fib_vec[c(-1,-5,-10)] #remove the first, 5th, and 10th element
#initilize catalan vector
catalan_vec <- catalan(1:10)
all(catalan_vec==1) #all of the values qequals 1
all(catalan_vec==1) #all of the values qequals 1
#other functions
any(catalan_vec==1) #any of the values equals 1
?pnorm
M <- matrix(c(3:14), nrow = 4, byrow = TRUE)
print(M)
# Elements are arranged sequentially by column.
N <- matrix(c(3:14), nrow = 4, byrow = FALSE)
print(N)
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
P <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
print(P)
# Access the element at 3rd column and 1st row.
print(P[1,3])
# Access only the  2nd row.
print(P[2,])
# Access only the 3rd column.
print(P[,3])
matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)
print(matrix1)
matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)
print(matrix2)
result <- matrix1 + matrix2
cat("Result of addition","\n")
print(result)
?cat
result <- matrix1 - matrix2
cat("Result of subtraction","\n")
print(result)
matrix1 <- matrix(c(3, 9, -1, 4, 2, 6), nrow = 2)
print(matrix1)
matrix2 <- matrix(c(5, 2, 0, 9, 3, 4), nrow = 2)
print(matrix2)
# Multiply the matrices.
result <- matrix1 * matrix2
cat("Result of multiplication","\n")
print(result)
# Divide the matrices
result <- matrix1 / matrix2
cat("Result of division","\n")
print(result)
################################DATA FRAMES################################
### Creating data frames using the data.frame function.
# Create the data frame.
emp.data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Summarize the data frame.
summary(emp.data)
View(emp.data)
View(emp.data)
################################DATA FRAMES################################
### Creating data frames using the data.frame function.
# Create the data frame.
emp.data <- data.frame(
emp_id = c(1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
# Summarize the data frame.
summary(emp.data)
str(emp.data)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
# Read tab delimited files "\t" or any other file that is delimited
sales_tab_delim <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,se
)
# Read tab delimited files "\t" or any other file that is delimited
sales_tab_delim <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
# Read excel sheets
sales_excel <- readxl::read_excel("Week_2/Data/sales.xlsx"
,sheet = "sales"
)
setwd("~/DSE5002")
setwd("~/GitHub/DSE5002")
# Read csv files (comma separated value)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
# Read tab delimited files "\t" or any other file that is delimited
sales_tab_delim <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
# Read excel sheets
sales_excel <- readxl::read_excel("Week_2/Data/sales.xlsx"
,sheet = "sales"
)
x <- 10
y <- 2
test_vector <- c(2,5,6)
z == 6
x %in% test_vector | y %in% test_vector
est_vector[x == test_vector]
test_vector[x == test_vector]
test_vector[y == test_vector]
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
z == 6
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
z <- 6
test_vector[(x==test_vector)|(y==test_vector)|(z==test_vector)]
Read csv files (comma separated value)
sales_csv <- read.csv("Week_2/Data/sales.csv"
,stringsAsFactors=FALSE
)
# Read tab delimited files "\t" or any other file that is delimited
sales_tab_delim <- read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
View(sales_tab_delim)
View(sales_csv)
# Read excel sheets
sales_excel <- readxl::read_excel("Week_2/Data/sales.xlsx"
,sheet = "sales"
)
View(sales_excel)
# Summarize the data
summary(sales_csv)
# Get the structure
str(sales_csv)
View(sales_csv)
?strsplit
## String split fixed will split the product id column into three columns in a matrix by the '-'
temp_char <- stringr::str_split_fixed(string=sales_csv$Product.ID,pattern='-',n=3)
sales_csv$Product <- paste(temp_char[,1], temp_char[,2],sep='-')
sales_csv$Product.Number <- temp_char[,3]
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep="\n\r"
)
cat(
sales_csv$Product.ID[1]
,sales_csv$Product[1]
,sales_csv$Product.Number[1]
,sep=" "
)
is.factor
?is.factor
unique(sales_csv$Region)
sales_csv$Region <- factor(sales_csv$Region)
is.factor(sales_csv$Region)
levels(sales_csv$Region)
# Create a basic barplot
barplot(table(sales_csv$Region))
table(sales_csv$Region)
barplot(table(sales_csv$Region))
sales_csv$Region <- factor(sales_csv$Region
,levels=c('West','East','Central','South')
)
levels(sales_csv$Region)
barplot(table(sales_csv$Region))
str(sales_csv$Order.Date)
# Check to see if Order.Date is a date
inherits(sales_csv$Order.Date
, c("Date")
)
# Using the table in our notes, convert the character to a date obeject.
sales_csv$Order.Date <- as.Date(sales_csv$Order.Date
,format='%m/%d/%Y'
)
inherits(sales_csv$Order.Date
, c("Date")
)
str(sales_csv$Order.Date)
sales_csv[1:10,5]
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class') ,]
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class')|(sales_csv$City=='Henderson') ,]
first_class_df = sales_csv[(sales_csv$Ship.Mode=='First Class') & (sales_csv$City=='Henderson') ,]
View(first_class_df)
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5,
read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
)
# Create a list containing strings, numbers, vectors and a logical values.
list_data <- list("Male", "Female", c(35,42,5), FALSE, 220.5,
read.delim("Week_2/Data/sales.txt"
,stringsAsFactors=FALSE
,sep = "\t"
)
)
# Get the first list element
list_data[[1]]
# Get the third list element (a vector!)
list_data[[3]]
# Get the last element of the vector
list_data[[3]][3]
list_data[[6]]$City[1]
names(list_data) <- c("Male", "Female", "number_vector","logical", "numeric",'sales_data')
print(list_data)
list_data$sales_data$Ship.Mode[5]
